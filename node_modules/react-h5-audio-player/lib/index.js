'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var style = {
  audioPlayerWrapper: function audioPlayerWrapper(hidePlayer) {
    return {
      display: hidePlayer ? 'none' : 'block'
    };
  },

  flexWrapper: {
    boxSizing: 'border-box',
    height: '70px',
    display: 'flex',
    justifyContent: 'space-between',
    width: '100%',
    padding: '15px 0',
    backgroundColor: 'white',
    position: 'relative',
    zIndex: '100',
    boxShadow: '0 0 3px 0 rgba(0, 0, 0, 0.2)'
  },
  pause: {
    boxSizing: 'content-box',
    display: 'block',
    width: '14px',
    height: '18px',
    borderLeft: '7px solid white',
    position: 'relative',
    zIndex: '1',
    left: '9px',
    backgroundColor: 'white',
    boxShadow: 'inset 7px 0 0 0 rgb(251, 86, 21)'
  },
  play: {
    boxSizing: 'content-box',
    display: 'block',
    width: '0',
    height: '0',
    borderTop: '10px solid transparent',
    borderBottom: '10px solid transparent',
    borderLeft: '20px solid white',
    position: 'relative',
    zIndex: '1',
    left: '13px'
  },
  togglePlayWrapper: {
    boxSizing: 'border-box',
    flex: '1 0 60px',
    position: 'relative'
  },
  togglePlay: {
    boxSizing: 'border-box',
    position: 'absolute',
    left: '50%',
    marginLeft: '-20px',
    backgroundColor: '#FB5615',
    color: 'white',
    width: '40px',
    height: '40px',
    borderRadius: '50%',
    textAlign: 'center',
    paddingTop: '10px'
  },
  progressBarWrapper: {
    boxSizing: 'border-box',
    position: 'relative',
    flex: '10 0 auto',
    alignSelf: 'center',
    padding: '5px 4% 0 0'
  },
  progressBar: {
    boxSizing: 'border-box',
    width: '100%',
    height: '5px',
    left: '0',
    top: '-5px',
    background: '#e4e4e4',
    marginBottom: '7px'
  },
  drag: function drag(left) {
    return {
      boxSizing: 'border-box',
      position: 'absolute',
      width: '20px',
      height: '20px',
      left: left,
      top: '-3px',
      background: 'skyblue',
      opacity: '0.8',
      borderRadius: '50px',
      boxShadow: '#fff 0 0 5px',
      cursor: 'pointer'
    };
  },

  time: {}
};

var DEFAULT_LISTEN_INTERVAL = 10000;

var H5AudioPlayer = function (_React$Component) {
  _inherits(H5AudioPlayer, _React$Component);

  function H5AudioPlayer(props) {
    _classCallCheck(this, H5AudioPlayer);

    var _this = _possibleConstructorReturn(this, (H5AudioPlayer.__proto__ || Object.getPrototypeOf(H5AudioPlayer)).call(this, props));

    _this.state = {
      duration: 0,
      currentTime: 0,
      dragLeft: 0,
      isDragging: false,
      isPlaying: false
    };
    _this.audio = {};
    _this.togglePlay = _this.togglePlay.bind(_this);
    return _this;
  }

  _createClass(H5AudioPlayer, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      // audio player object
      var audio = this.audio;
      // progress bar slider object
      var slider = this.slider;

      this.intervalId = setInterval(function () {
        var currentTime = _this2.audio.currentTime;
        var duration = _this2.audio.duration;
        var barWidth = _this2.bar.offsetWidth;
        var left = barWidth * currentTime / duration || 0;
        if (!_this2.audio.paused && !_this2.state.isDragging) {
          _this2.setState({
            currentTime: currentTime,
            duration: duration,
            barWidth: barWidth,
            dragLeft: left
          });
        }
      }, 500);
      audio.addEventListener('error', function (e) {
        _this2.props.onError && _this2.props.onError(e);
      });

      // When enough of the file has downloaded to start playing
      audio.addEventListener('canplay', function (e) {
        _this2.props.onCanPlay && _this2.props.onCanPlay(e);
      });

      // When enough of the file has downloaded to play the entire file
      audio.addEventListener('canplaythrough', function (e) {
        _this2.props.onCanPlayThrough && _this2.props.onCanPlayThrough(e);
      });

      // When audio play starts
      audio.addEventListener('play', function (e) {
        _this2.setState({ isPlaying: true });
        _this2.setListenTrack();
        _this2.props.onPlay && _this2.props.onPlay(e);
      });

      // When unloading the audio player (switching to another src)
      audio.addEventListener('abort', function (e) {
        _this2.clearListenTrack();
        _this2.props.onAbort && _this2.props.onAbort(e);
      });

      // When the file has finished playing to the end
      audio.addEventListener('ended', function (e) {
        _this2.clearListenTrack();
        _this2.props.onEnded && _this2.props.onEnded(e);
      });

      // When the user pauses playback
      audio.addEventListener('pause', function (e) {
        _this2.setState({ isPlaying: false });
        _this2.clearListenTrack();
        _this2.props.onPause && _this2.props.onPause(e);
      });

      var dragX = void 0;
      slider.addEventListener('dragstart', function (e) {
        if (!_this2.audio.src) {
          return;
        }
        e.dataTransfer.setData('text', 'slider');
        if (e.dataTransfer.setDragImage) {
          var crt = slider.cloneNode(true);
          e.dataTransfer.setDragImage(crt, 0, 0);
        }
        _this2.audio.pause();
        document.addEventListener('dragover', function (event) {
          event = event || window.event;
          dragX = event.pageX;
        });
        _this2.props.onDragStart && _this2.props.onDragStart(e);
        _this2.setState({ isDragging: true });
      });

      slider.addEventListener('touchstart', function (e) {
        _this2.setState({ isDragging: true });
        _this2.props.onDragStart && _this2.props.onDragStart(e);
        setTimeout(function () {
          return _this2.audio.pause();
        }, 0);
      });
      slider.addEventListener('drag', function (e) {
        if (!_this2.audio.src) {
          return;
        }
        if (dragX) {
          var dragLeft = dragX - _this2.bar.getBoundingClientRect().left;
          if (dragLeft < 0) {
            dragLeft = 0;
          } else if (dragLeft > _this2.bar.offsetWidth) {
            dragLeft = _this2.bar.offsetWidth - 1;
          }
          _this2.setState({ dragLeft: dragLeft });
          _this2.props.onDragMove && _this2.props.onDragMove(e);
        }
      });
      slider.addEventListener('touchmove', function (e) {
        _this2.setState({ dragLeft: e.touches[0].clientX - _this2.bar.getBoundingClientRect().left });
        _this2.props.onDragMove && _this2.props.onDragMove(e);
      });
      slider.addEventListener('dragend', function (e) {
        if (!_this2.audio.src) {
          return;
        }
        var audio = _this2.audio;
        audio.currentTime = audio.duration * _this2.state.dragLeft / _this2.bar.offsetWidth || 0;
        audio.play();
        _this2.setState({ isDragging: false });
        _this2.props.onDragEnd && _this2.props.onDragEnd(e);
      });
      slider.addEventListener('touchend', function (e) {
        _this2.setState({ isDragging: false });
        _this2.props.onDragEnd && _this2.props.onDragEnd(e);
        setTimeout(function () {
          var audio = _this2.audio;
          audio.currentTime = audio.duration * _this2.state.dragLeft / _this2.bar.offsetWidth;
          audio.play();
        }, 0);
      });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      clearInterval(this.intervalId);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      var _props = this.props,
          audioFile = _props.audioFile,
          isPlaying = _props.isPlaying;

      if (isPlaying && this.audio.paused && !!audioFile) {
        this.play();
      }
    }
  }, {
    key: 'togglePlay',
    value: function togglePlay() {
      if (this.audio.paused && this.audio.src) {
        this.audio.play();
      } else if (!this.audio.paused) {
        this.audio.pause();
      }
    }

    /**
     * Set an interval to call props.onListen every props.listenInterval time period
     */

  }, {
    key: 'setListenTrack',
    value: function setListenTrack() {
      var _this3 = this;

      if (!this.listenTracker) {
        var listenInterval = this.props.listenInterval || DEFAULT_LISTEN_INTERVAL;
        this.listenTracker = setInterval(function () {
          _this3.props.onListen && _this3.props.onListen(_this3.audioEl.currentTime);
        }, listenInterval);
      }
    }

    /**
     * Clear the onListen interval
     */

  }, {
    key: 'clearListenTrack',
    value: function clearListenTrack() {
      if (this.listenTracker) {
        clearInterval(this.listenTracker);
        this.listenTracker = null;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this4 = this;

      var incompatibilityMessage = this.props.children || _react2.default.createElement(
        'p',
        null,
        'Your browser does not support the ',
        _react2.default.createElement(
          'code',
          null,
          'audio'
        ),
        ' element.'
      );

      var currentTimeMin = Math.floor(this.state.currentTime / 60);
      var currentTimeSec = Math.floor(this.state.currentTime % 60);
      var durationMin = Math.floor(this.state.duration / 60);
      var durationSec = Math.floor(this.state.duration % 60);
      var addHeadingZero = function addHeadingZero(num) {
        return num > 9 ? num.toString() : '0' + num;
      };

      currentTimeMin = addHeadingZero(currentTimeMin);
      currentTimeSec = addHeadingZero(currentTimeSec);
      durationMin = addHeadingZero(durationMin);
      durationSec = addHeadingZero(durationSec);

      return _react2.default.createElement(
        'div',
        { style: style.audioPlayerWrapper(this.props.hidePlayer), className: 'react-h5-audio-player' },
        _react2.default.createElement(
          'div',
          { style: style.flexWrapper, className: 'flex' },
          _react2.default.createElement(
            'audio',
            {
              src: this.props.src,
              autoPlay: this.props.autoPlay,
              preload: this.props.preload,
              ref: function ref(_ref) {
                _this4.audio = _ref;
              },
              onPlay: this.onPlay
            },
            incompatibilityMessage
          ),
          _react2.default.createElement(
            'div',
            { className: 'toggle-play-wrapper', style: style.togglePlayWrapper },
            _react2.default.createElement(
              'a',
              { className: 'toggle-play-button', onClick: function onClick(e) {
                  return _this4.togglePlay(e);
                }, style: style.togglePlay },
              this.state.isPlaying ? _react2.default.createElement('i', { style: style.pause }) : _react2.default.createElement('i', { style: style.play })
            )
          ),
          _react2.default.createElement(
            'div',
            { className: 'progress-bar-wrapper', style: style.progressBarWrapper },
            _react2.default.createElement('div', { ref: function ref(_ref2) {
                _this4.bar = _ref2;
              }, style: style.progressBar }),
            _react2.default.createElement('div', { className: 'sought' }),
            _react2.default.createElement('div', {
              className: 'indicator',
              draggable: 'true',
              ref: function ref(_ref3) {
                _this4.slider = _ref3;
              },
              style: style.drag(this.state.dragLeft)
            }),
            _react2.default.createElement(
              'div',
              { className: 'time', style: style.time },
              _react2.default.createElement(
                'span',
                { className: 'current-time' },
                currentTimeMin,
                ':',
                currentTimeSec
              ),
              '/',
              _react2.default.createElement(
                'span',
                { className: 'total-time' },
                durationMin,
                ':',
                durationSec
              )
            )
          )
        )
      );
    }
  }]);

  return H5AudioPlayer;
}(_react2.default.Component);

H5AudioPlayer.propTypes = {
  autoPlay: _react2.default.PropTypes.bool,
  children: _react2.default.PropTypes.element,
  listenInterval: _react2.default.PropTypes.number,
  onAbort: _react2.default.PropTypes.func,
  onCanPlay: _react2.default.PropTypes.func,
  onCanPlayThrough: _react2.default.PropTypes.func,
  onEnded: _react2.default.PropTypes.func,
  onError: _react2.default.PropTypes.func,
  onListen: _react2.default.PropTypes.func,
  onPause: _react2.default.PropTypes.func,
  onPlay: _react2.default.PropTypes.func,
  onDragStart: _react2.default.PropTypes.func,
  onDragMove: _react2.default.PropTypes.func,
  onDragEnd: _react2.default.PropTypes.func,
  preload: _react2.default.PropTypes.string,
  src: _react2.default.PropTypes.string,
  hidePlayer: _react2.default.PropTypes.bool
};

exports.default = H5AudioPlayer;